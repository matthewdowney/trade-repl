["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "],"~$window",["^ ","~$location",["^ "]],"~$CodeMirror",["^ ","~$prototype",["^ ","~$on",["^ "],"~$getValue",["^ "]]],"~$Infinity",["^ "],"~$document",["^ ","~$getElementById",["^ "]]],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$trade-repl.core","~:imports",null,"~:requires",["^ ","~$reagent","~$reagent.core","~$pprint","~$cljs.pprint","^E","^E","~$cljs.js","^H","~$goog.crypt.base64","^I","~$dc","~$decimal.core","~$walk","~$clojure.walk","~$clojure.core.match","~$cljs.core.match","~$keybind.core","^P","^G","^G","^K","^K","~$string","~$clojure.string","~$k","^P","~$b64","^I","^R","^R","~$cljs.reader","^T","^M","^M","^O","^O","~$reader","^T","~$shape","^O"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","~$eval","^H","~$empty-state","^H","~$js-eval","^H"],"~:defs",["^ ","~$gather-trades",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/home/matthew/trade-repl/src/trade_repl/core.cljs","~:line",166,"~:column",7,"~:end-line",166,"~:end-column",20,"~:arglists",["~#list",["~$quote",["^1:",[["~$left","~$line"]]]]],"~:doc","A reducing function over input lines that keeps track of (group ...) declarations."],"^@","~$trade-repl.core/gather-trades","~:variadic",false,"^14","src/trade_repl/core.cljs","^18",20,"~:method-params",["^1:",[["^1<","^1="]]],"~:protocol-impl",null,"~:arglists-meta",["^1:",[null,null]],"^16",1,"^15",166,"^17",166,"~:max-fixed-arity",2,"~:fn-var",true,"^19",["^1:",["^1;",["^1:",[["^1<","^1="]]]]],"^1>","A reducing function over input lines that keeps track of (group ...) declarations."],"~$parse-fees",["^ ","^12",null,"^13",["^ ","^14","/home/matthew/trade-repl/src/trade_repl/core.cljs","^15",116,"^16",7,"^17",116,"^18",17,"^19",["^1:",["^1;",["^1:",[[["^ ","~:keys",["~$group","~$venue","~$action","~$price","~$qty","~$base","~$counter"],"~:as","~$trade"],"^1="]]]]],"^1>","A parsed trade & text line to maybe a fee object."],"^@","~$trade-repl.core/parse-fees","^1@",false,"^14","src/trade_repl/core.cljs","^18",17,"^1A",["^1:",[["~$p__31609","^1="]]],"^1B",null,"^1C",["^1:",[null,null]],"^16",1,"^15",116,"^17",116,"^1D",2,"^1E",true,"^19",["^1:",["^1;",["^1:",[[["^ ","^1G",["^1H","^1I","^1J","^1K","^1L","^1M","^1N"],"^1O","^1P"],"^1="]]]]],"^1>","A parsed trade & text line to maybe a fee object."],"~$->act",["^ ","^12",null,"^13",["^ ","^14","/home/matthew/trade-repl/src/trade_repl/core.cljs","^15",74,"^16",7,"^17",74,"^18",12,"^19",["^1:",["^1;",["^1:",[["~$a"]]]]]],"^@","~$trade-repl.core/->act","^1@",false,"^14","src/trade_repl/core.cljs","^18",12,"^1A",["^1:",[["~$a"]]],"^1B",null,"^1C",["^1:",[null,null]],"^16",1,"^15",74,"^17",74,"^1D",1,"^1E",true,"^19",["^1:",["^1;",["^1:",[["~$a"]]]]]],"~$main",["^ ","^12",null,"^13",["^ ","^14","/home/matthew/trade-repl/src/trade_repl/core.cljs","^15",409,"^16",16,"^17",409,"^18",20,"~:export",true,"^19",["^1:",["^1;",["^1:",[[]]]]]],"^@","~$trade-repl.core/main","^1@",false,"^14","src/trade_repl/core.cljs","^18",20,"^1A",["^1:",[[]]],"^1B",null,"^1V",true,"^1C",["^1:",[null,null]],"^16",1,"^15",409,"^17",409,"^1D",0,"^1E",true,"^19",["^1:",["^1;",["^1:",[[]]]]]],"~$?linked-content",["^ ","^12",null,"^13",["^ ","^14","/home/matthew/trade-repl/src/trade_repl/core.cljs","^15",274,"^16",7,"^17",274,"^18",22,"^19",["^1:",["^1;",["^1:",[[]]]]]],"^@","~$trade-repl.core/?linked-content","^1@",false,"^14","src/trade_repl/core.cljs","^18",22,"^1A",["^1:",[[]]],"^1B",null,"^1C",["^1:",[null,null]],"^16",1,"^15",274,"^17",274,"^1D",0,"^1E",true,"^19",["^1:",["^1;",["^1:",[[]]]]]],"~$code-mirror",["^ ","^12",null,"^13",["^ ","^14","/home/matthew/trade-repl/src/trade_repl/core.cljs","^15",301,"^16",7,"^17",301,"^18",18,"^19",["^1:",["^1;",["^1:",[["~$value-atom",["^ ","^1G",["~$style","~$js-cm-opts","~$on-cm-init","~$on-change"]]]]]]],"^1>","Create a code-mirror editor. The parameters:\n  - value-atom (reagent atom)      when this changes, the editor will update to reflect it.\n  options\n  - :style (reagent style map)     will be applied to the container element\n  - :js-cm-opts                    options passed into the CodeMirror constructor\n  - :on-cm-init (fn [cm] -> nil)   called with the CodeMirror instance, for whatever extra fiddling you want to do."],"^@","~$trade-repl.core/code-mirror","^1@",false,"^14","src/trade_repl/core.cljs","^18",18,"^1A",["^1:",[["^1[","~$p__31705"]]],"^1B",null,"^1C",["^1:",[null,null]],"^16",1,"^15",301,"^17",301,"^1D",2,"^1E",true,"^19",["^1:",["^1;",["^1:",[["^1[",["^ ","^1G",["^20","^21","^22","^23"]]]]]]],"^1>","Create a code-mirror editor. The parameters:\n  - value-atom (reagent atom)      when this changes, the editor will update to reflect it.\n  options\n  - :style (reagent style map)     will be applied to the container element\n  - :js-cm-opts                    options passed into the CodeMirror constructor\n  - :on-cm-init (fn [cm] -> nil)   called with the CodeMirror instance, for whatever extra fiddling you want to do."],"~$text-area",["^ ","^12",null,"^13",["^ ","^14","/home/matthew/trade-repl/src/trade_repl/core.cljs","^15",252,"^16",7,"^17",252,"^18",16,"^19",["^1:",["^1;",["^1:",[["~$value","^23"]]]]],"^1>","A generic text area that accepts a string to display and a callback (fn [new-text] ...)."],"^@","~$trade-repl.core/text-area","^1@",false,"^14","src/trade_repl/core.cljs","^18",16,"^1A",["^1:",[["^27","^23"]]],"^1B",null,"^1C",["^1:",[null,null]],"^16",1,"^15",252,"^17",252,"^1D",2,"^1E",true,"^19",["^1:",["^1;",["^1:",[["^27","^23"]]]]],"^1>","A generic text area that accepts a string to display and a callback (fn [new-text] ...)."],"~$->s",["^ ","^12",null,"^13",["^ ","^14","/home/matthew/trade-repl/src/trade_repl/core.cljs","^15",79,"^16",7,"^17",79,"^18",10,"^19",["^1:",["^1;",["^1:",[["~$x"]]]]]],"^@","~$trade-repl.core/->s","^1@",false,"^14","src/trade_repl/core.cljs","^18",10,"^1A",["^1:",[["~$x"]]],"^1B",null,"^1C",["^1:",[null,null]],"^16",1,"^15",79,"^17",79,"^1D",1,"^1E",true,"^19",["^1:",["^1;",["^1:",[["~$x"]]]]]],"~$line->trade",["^ ","^12",null,"^13",["^ ","^14","/home/matthew/trade-repl/src/trade_repl/core.cljs","^15",85,"^16",7,"^17",85,"^18",18,"^19",["^1:",["^1;",["^1:",[["~$line-text"]]]]],"^1>","A text line to maybe a trade object."],"^@","~$trade-repl.core/line->trade","^1@",false,"^14","src/trade_repl/core.cljs","^18",18,"^1A",["^1:",[["^2<"]]],"^1B",null,"^1C",["^1:",[null,null]],"^16",1,"^15",85,"^17",85,"^1D",1,"^1E",true,"^19",["^1:",["^1;",["^1:",[["^2<"]]]]],"^1>","A text line to maybe a trade object."],"~$home",["^ ","^12",null,"^13",["^ ","^14","/home/matthew/trade-repl/src/trade_repl/core.cljs","^15",356,"^16",7,"^17",356,"^18",11,"^19",["^1:",["^1;",["^1:",[[]]]]]],"^@","~$trade-repl.core/home","^1@",false,"^14","src/trade_repl/core.cljs","^18",11,"^1A",["^1:",[[]]],"^1B",null,"^1C",["^1:",[null,null]],"^16",1,"^15",356,"^17",356,"^1D",0,"^1E",true,"^19",["^1:",["^1;",["^1:",[[]]]]]],"~$table",["^ ","^12",null,"^13",["^ ","^14","/home/matthew/trade-repl/src/trade_repl/core.cljs","^15",217,"^16",7,"^17",217,"^18",12,"^19",["^1:",["^1;",["^1:",[["~$table-data",["^ ","^1G",["~$col->width","~$group-on","~$last-row-style","~$desc"]]]]]]],"^1>","A generic tabular display (accepts a coll of {:column <value>})."],"^@","~$trade-repl.core/table","^1@",false,"^14","src/trade_repl/core.cljs","^18",12,"^1A",["^1:",[["^2A","~$p__31662"]]],"^1B",null,"^1C",["^1:",[null,null]],"^16",1,"^15",217,"^17",217,"^1D",2,"^1E",true,"^19",["^1:",["^1;",["^1:",[["^2A",["^ ","^1G",["^2B","^2C","^2D","^2E"]]]]]]],"^1>","A generic tabular display (accepts a coll of {:column <value>})."],"~$recalculate-for-input",["^ ","^12",null,"^13",["^ ","^14","/home/matthew/trade-repl/src/trade_repl/core.cljs","^15",265,"^16",7,"^17",265,"^18",28,"^19",["^1:",["^1;",["^1:",[["~$state","~$input-text"]]]]]],"^@","~$trade-repl.core/recalculate-for-input","^1@",false,"^14","src/trade_repl/core.cljs","^18",28,"^1A",["^1:",[["^2I","^2J"]]],"^1B",null,"^1C",["^1:",[null,null]],"^16",1,"^15",265,"^17",265,"^1D",2,"^1E",true,"^19",["^1:",["^1;",["^1:",[["^2I","^2J"]]]]]],"~$trade->display",["^ ","^12",null,"^13",["^ ","^14","/home/matthew/trade-repl/src/trade_repl/core.cljs","^15",186,"^16",7,"^17",186,"^18",21,"^19",["^1:",["^1;",["^1:",[[["^ ","^1G",["^1J","^1L","^1K","^1M","~$contract","^1I","~$deltas","^1H","^2E"]]]]]]],"^1>","Display a trade by showing the position deltas it causes."],"^@","~$trade-repl.core/trade->display","^1@",false,"^14","src/trade_repl/core.cljs","^18",21,"^1A",["^1:",[["~$p__31645"]]],"^1B",null,"^1C",["^1:",[null,null]],"^16",1,"^15",186,"^17",186,"^1D",1,"^1E",true,"^19",["^1:",["^1;",["^1:",[[["^ ","^1G",["^1J","^1L","^1K","^1M","^2M","^1I","^2N","^1H","^2E"]]]]]]],"^1>","Display a trade by showing the position deltas it causes."],"~$inst",["^ ","^@","~$trade-repl.core/inst","^14","src/trade_repl/core.cljs","^15",353,"^16",1,"^17",353,"^18",10,"^13",["^ ","^14","/home/matthew/trade-repl/src/trade_repl/core.cljs","^15",353,"^16",6,"^17",353,"^18",10],"~:tag","~$any"],"~$input-text-atom",["^ ","^@","~$trade-repl.core/input-text-atom","^14","src/trade_repl/core.cljs","^15",298,"^16",1,"^17",298,"^18",25,"^13",["^ ","^14","/home/matthew/trade-repl/src/trade_repl/core.cljs","^15",298,"^16",10,"^17",298,"^18",25],"^2S","^2T"],"~$future-pair?",["^ ","^12",null,"^13",["^ ","^14","/home/matthew/trade-repl/src/trade_repl/core.cljs","^15",145,"^16",7,"^17",145,"^18",19,"^19",["^1:",["^1;",["^1:",[["^1M","^1N"],[["^ ","^1G",["^1M","^1N"]]]]]]],"~:top-fn",["^ ","^1@",false,"^1D",2,"^1A",["^1:",[["^1M","^1N"],[["^ ","^1G",["^1M","^1N"]]]]],"^19",["^1:",[["^1M","^1N"],[["^ ","^1G",["^1M","^1N"]]]]],"^1C",["^1:",[null,null]]]],"^@","~$trade-repl.core/future-pair?","^1@",false,"^14","src/trade_repl/core.cljs","^18",19,"^2X",["^ ","^1@",false,"^1D",2,"^1A",["^1:",[["^1M","^1N"],[["^ ","^1G",["^1M","^1N"]]]]],"^19",["^1:",[["^1M","^1N"],[["^ ","^1G",["^1M","^1N"]]]]],"^1C",["^1:",[null,null]]],"^1A",["^1:",[["^1M","^1N"],[["^ ","^1G",["^1M","^1N"]]]]],"^1B",null,"^1C",["^1:",[null,null]],"^16",1,"^15",145,"^17",145,"^1D",2,"^1E",true,"^19",["^1:",[["^1M","^1N"],[["^ ","^1G",["^1M","^1N"]]]]]],"~$insert-eval-results",["^ ","^12",null,"^13",["^ ","^14","/home/matthew/trade-repl/src/trade_repl/core.cljs","^15",53,"^16",7,"^17",53,"^18",26,"^19",["^1:",["^1;",["^1:",[["^2J"]]]]],"^1>","Given the raw input text, eval whichever parts of it ask for evaluation and don't yet have a result."],"^@","~$trade-repl.core/insert-eval-results","^1@",false,"^14","src/trade_repl/core.cljs","^18",26,"^1A",["^1:",[["^2J"]]],"^1B",null,"^1C",["^1:",[null,null]],"^16",1,"^15",53,"^17",53,"^1D",1,"^1E",true,"^19",["^1:",["^1;",["^1:",[["^2J"]]]]],"^1>","Given the raw input text, eval whichever parts of it ask for evaluation and don't yet have a result."],"~$summarize-trades",["^ ","^12",null,"^13",["^ ","^14","/home/matthew/trade-repl/src/trade_repl/core.cljs","^15",204,"^16",7,"^17",204,"^18",23,"^19",["^1:",["^1;",["^1:",[["~$trades","~$by-key"]]]]],"^1>","Create a summary table for position changes from trades."],"^@","~$trade-repl.core/summarize-trades","^1@",false,"^14","src/trade_repl/core.cljs","^18",23,"^1A",["^1:",[["^31","^32"]]],"^1B",null,"^1C",["^1:",[null,null]],"^16",1,"^15",204,"^17",204,"^1D",2,"^1E",true,"^19",["^1:",["^1;",["^1:",[["^31","^32"]]]]],"^1>","Create a summary table for position changes from trades."],"~$initialize",["^ ","^@","~$trade-repl.core/initialize","^14","src/trade_repl/core.cljs","^15",286,"^16",1,"^17",286,"^18",20,"^13",["^ ","^14","/home/matthew/trade-repl/src/trade_repl/core.cljs","^15",286,"^16",10,"^17",286,"^18",20],"^2S","~$clj-nil"],"~$default-content",["^ ","^@","~$trade-repl.core/default-content","^14","src/trade_repl/core.cljs","^15",283,"^16",1,"^17",283,"^18",21,"^13",["^ ","^14","/home/matthew/trade-repl/src/trade_repl/core.cljs","^15",283,"^16",6,"^17",283,"^18",21],"^2S","^Q"],"~$eval-sexprs",["^ ","^12",null,"^13",["^ ","^14","/home/matthew/trade-repl/src/trade_repl/core.cljs","^15",34,"^16",7,"^17",34,"^18",18,"^19",["^1:",["^1;",["^1:",[["~$input-lines"]]]]],"^1>","Return a coll of {:line <original line text> :evald <eval result>} for lines\n  that need to be evald."],"^@","~$trade-repl.core/eval-sexprs","^1@",false,"^14","src/trade_repl/core.cljs","^18",18,"^1A",["^1:",[["^3:"]]],"^1B",null,"^1C",["^1:",[null,null]],"^16",1,"^15",34,"^17",34,"^1D",1,"^1E",true,"^19",["^1:",["^1;",["^1:",[["^3:"]]]]],"^1>","Return a coll of {:line <original line text> :evald <eval result>} for lines\n  that need to be evald."],"~$app-state",["^ ","^@","~$trade-repl.core/app-state","^14","src/trade_repl/core.cljs","^15",19,"^16",1,"^17",19,"^18",19,"^13",["^ ","^14","/home/matthew/trade-repl/src/trade_repl/core.cljs","^15",19,"^16",10,"^17",19,"^18",19],"^2S","^2T"],"~$on-js-reload",["^ ","^12",null,"^13",["^ ","^14","/home/matthew/trade-repl/src/trade_repl/core.cljs","^15",414,"^16",7,"^17",414,"^18",19,"^19",["^1:",["^1;",["^1:",[[]]]]]],"^@","~$trade-repl.core/on-js-reload","^1@",false,"^14","src/trade_repl/core.cljs","^18",19,"^1A",["^1:",[[]]],"^1B",null,"^1C",["^1:",[null,null]],"^16",1,"^15",414,"^17",414,"^1D",0,"^1E",true,"^19",["^1:",["^1;",["^1:",[[]]]]]],"~$->n",["^ ","^12",null,"^13",["^ ","^14","/home/matthew/trade-repl/src/trade_repl/core.cljs","^15",71,"^16",7,"^17",71,"^18",10,"^19",["^1:",["^1;",["^1:",[["~$s"]]]]]],"^@","~$trade-repl.core/->n","^1@",false,"^14","src/trade_repl/core.cljs","^18",10,"^1A",["^1:",[["~$s"]]],"^1B",null,"^1C",["^1:",[null,null]],"^16",1,"^15",71,"^17",71,"^1D",1,"^1E",true,"^19",["^1:",["^1;",["^1:",[["~$s"]]]]]],"~$with-deltas",["^ ","^12",null,"^13",["^ ","^14","/home/matthew/trade-repl/src/trade_repl/core.cljs","^15",108,"^16",7,"^17",108,"^18",18,"^19",["^1:",["^1;",["^1:",[[["^ ","^1G",["^1J","^1M","^1N","^1L","^1K"],"^1O","^1P"]]]]]]],"^@","~$trade-repl.core/with-deltas","^1@",false,"^14","src/trade_repl/core.cljs","^18",18,"^1A",["^1:",[["~$p__31605"]]],"^1B",null,"^1C",["^1:",[null,null]],"^16",1,"^15",108,"^17",108,"^1D",1,"^1E",true,"^19",["^1:",["^1;",["^1:",[[["^ ","^1G",["^1J","^1M","^1N","^1L","^1K"],"^1O","^1P"]]]]]]]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^D","^E","^F","^G","^E","^E","^H","^H","^N","^O","^G","^G","^T","^T","^O","^O","^U","^T","^V","^O"],"~:cljs.analyzer/constants",["^ ","~:seen",["^?",["~:thead","~:col->width","~:js-cm-opts","~:lineWrapping","~:group-on","~:rowSpan","~:showing","~:parsed-data","~:group","~:tbody","~:desc","~:table","~:color","~:key","~:evald","~:input-text","~:else","~:summarize-by","~:on-cm-init","~:font-weight","~:entries","~:trade-repl.core/vim-trigger","~:float","~:matchBrackets","~:contract","~:td","~:margin-left","~:value","~:th","~:component-did-mount","~:tr","~:mode","~:width","~:background","~:component-did-update","~:cursor","~:type","~:key-map","~:trade","~:on-click","~:font","~:style","~:textarea","~:div","~:counter","~:sell","~:viewportMargin","~:reagent-render","^15","~:expr","~:buy","~:class","~:autofocus","~:padding","~:venue","~:source-map","~:underlying","~:context","~:last-row-style","~:adjust-trade","~:qty","~:display","~:action","~:fees","~:h2","~:br","~:fontSize","~:input","~:display-data","~:base","~:on-change","~:border","~:price","~:parsed","~:p","~:settle","~:lineNumbers","~:href","~:deltas","~:a","~:font-family","~:height","~:border-bottom","~:autoCloseBrackets","~:margin","~:eval"]],"~:order",["^3X","^4B","^3P","^54","^3O","^3Z","^4Y","^4R","^5C","^4S","^4U","^4M","^48","^15","^3W","^3Y","^4J","^4N","^4Z","^4X","^58","^55","^4I","^5=","^3Q","^3S","^4W","^4T","^5:","^41","^45","^4C","^4[","^3J","^3M","^4V","^4H","^4O","~:p","^4F","^3T","^4=","^3I","^4;","^49","^3V","^3R","^5@","^46","^3N","^4G","^56","^5?","^5>","^3K","^3[","^4:","^4?","^4L","^5;","^3L","^4K","^44","^4P","^5A","^4<","^3U","^43","^47","^4>","^4@","^4E","^4Q","^52","^57","^5B","^42","^53","^4A","^4D","^51","^50","^59","~:a","^5<","^40"]],"^1>","Very rough first draft. \n\n  The idea is that there's textual input, which is parsed into tabular data for display in one\n  table and is then sumamrized in another."]